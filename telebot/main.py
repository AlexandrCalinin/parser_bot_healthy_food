import os.path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from config import BOT_TOKEN, DEFAULT_COMMANDS
from keyboards.start_keyboard import start_keyboard
from loguru import logger
from database.database import get_data_from_breakfast_table, get_data_from_desserts_table, get_data_from_lunch_table, \
    get_data_from_dinner_table, create_user, send_data_from_recipe_to_database, get_created_history
from states import storage, StatesForCreate

bot = Bot(BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
alphabet = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')


@logger.catch()
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    """
    Start function
    :param message: Object of message class
    :return: None
    """
    create_user(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {start.__name__}")
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.full_name}! üôã\n–Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤. üî•\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ–¥–Ω—É</b> –∏–∑ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.", reply_markup=start_keyboard())


@logger.catch()
@dp.message_handler(commands=["help"])
async def help_info(message: types.Message):
    """
    Function which helps you to choose a command
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É help")
    string = ""
    for name, description in DEFAULT_COMMANDS:
        string += f"‚û°Ô∏è<b>{name}</b> - {description}\n"
    await message.answer(string)


@logger.catch()
@dp.message_handler(commands=["breakfast"])
async def breakfast(message: types.Message) -> None:
    """
    Function for sending recipies for breakfast
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {breakfast.__name__}")
    queryset = get_data_from_breakfast_table(message=message, number=15)

    for items in queryset:
        message_structure = f"{hlink(items[1], items[5])} üò±\nüÜî id: {items[0]}\n<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: " \
                            f"{items[2]}\n<b>üçî –ö–∞–ª–ª–æ—Ä–∏–∏</b>: {items[3]}\n<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {items[4]}"
        await message.answer(message_structure)


@logger.catch()
@dp.message_handler(commands=["dinner"])
async def dinner(message: types.Message) -> None:
    """
    Function for sending recipies for dinner
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {dinner.__name__}")
    queryset = get_data_from_dinner_table(message=message, number=15)

    for items in queryset:
        message_structure = f"{hlink(items[1], items[5])} üò±\nüÜî id: {items[0]}\n<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: " \
                            f"{items[2]}\n<b>üçî –ö–∞–ª–ª–æ—Ä–∏–∏</b>: {items[3]}\n<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {items[4]}"
        await message.answer(message_structure)


@logger.catch()
@dp.message_handler(commands=["lunch"])
async def lunch(message: types.Message) -> None:
    """
    Function for sending recipies for lunch
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {lunch.__name__}")
    queryset = get_data_from_lunch_table(message=message, number=15)

    for items in queryset:
        message_structure = f"{hlink(items[1], items[5])} üò±\nüÜî id: {items[0]}\n<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: " \
                            f"{items[2]}\n<b>üçî –ö–∞–ª–ª–æ—Ä–∏–∏</b>: {items[3]}\n<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {items[4]}"
        await message.answer(message_structure)


@logger.catch()
@dp.message_handler(commands=["desserts"])
async def desserts(message: types.Message) -> None:
    """
    Function for sending recipies for desserts
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {desserts.__name__}")
    queryset = get_data_from_desserts_table(message=message, number=15)

    for items in queryset:
        message_structure = f"{hlink(items[1], items[5])} üò±\nüÜî id: {items[0]}\n<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: " \
                            f"{items[2]}\n<b>üçî –ö–∞–ª–ª–æ—Ä–∏–∏</b>: {items[3]}\n<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {items[4]}"
        await message.answer(message_structure)


@logger.catch()
@dp.message_handler(commands=["create"])
async def create_recipe(message: types.Message) -> None:
    """
    Funtion for creating recipies
    :params
        message - object of Message class
    :return
        none
    """
    await StatesForCreate.title.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {create_recipe.__name__}")
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞! üÜï\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ üçΩ:")


@logger.catch()
@dp.message_handler(state=StatesForCreate.title)
async def set_title(message: types.Message, state: FSMContext) -> None:
    """
    Set type for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.type.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_type.__name__}")
    if not alphabet.isdisjoint(message.text.lower()):

        async with state.proxy() as data:
            data["title"] = message.text

        await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ. –ò–∑ –∫–∞–∫–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –¥–Ω—è –±–ª—é–¥–æ?\n"
                             "<b>(–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω, –¥–µ—Å–µ—Ä—Ç—ã)</b>")
    else:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã! ‚ùå\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ")


@logger.catch()
@dp.message_handler(state=StatesForCreate.type)
async def set_type(message: types.Message, state: FSMContext) -> None:
    """
    Set type for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.time.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_time.__name__}")

    if not alphabet.isdisjoint(message.text.lower()) and message.text.lower() in ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–¥–µ—Å–µ—Ä—Ç—ã"]:

        async with state.proxy() as data:
            data["type"] = message.text

        await message.answer("‚úÖ –ï—Å—Ç—å, –∏–¥–µ–º –¥–∞–ª—å—à–µ. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞?\n"
                             "<b>(–ü—Ä–∏–º–µ—Ä: 3 –¥ 2 —á 1 –º–∏–Ω)</b>")
    else:
        await message.answer("–¢–∏–ø —Ä–∞—Ü–∏–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã! ‚ùå\n"
                             "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ")


@logger.catch()
@dp.message_handler(state=StatesForCreate.time)
async def set_time(message: types.Message, state: FSMContext) -> None:
    """
    Set time for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.calories.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_time.__name__}")

    if message.text.replace(" ", "").isalnum():

        async with state.proxy() as data:
            data["time"] = message.text

        await message.answer("‚úÖ –í—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–ª–ª–æ—Ä–∏–π –≤–µ—Å–∏—Ç –±–ª—é–¥–æ?\n"
                             "<b>(–ü—Ä–∏–º–µ—Ä: 123 –∫–∫–∞–ª)</b>")
    else:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã! ‚ùå\n"
                             "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ")


@logger.catch()
@dp.message_handler(state=StatesForCreate.calories)
async def set_calories(message: types.Message, state: FSMContext) -> None:
    """
    Set calories for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.description.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_calories.__name__}")

    if message.text.replace(" ", "").isalnum():

        async with state.proxy() as data:
            data["calories"] = message.text

        await message.answer("–≠—Ö, –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–æ—Ä—å–±–∞ —Å –∫–∞–ª–ª–æ—Ä–∏—è–º–∏... üòî\n"
                             "‚è≠ –û–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ —ç—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. \n"
                             "–ü—Ä–∏–º–µ—Ä: (1. –†–∞–∑–±–∏—Ç—å —è–π—Ü–æ. 2. –î–æ–±–∞–≤–∏—Ç—å –º—É–∫—É ...)")
    else:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. ‚ùå\n "
                             "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ")


@logger.catch()
@dp.message_handler(state=StatesForCreate.description)
async def set_description(message: types.Message, state: FSMContext) -> None:
    """
    Set description for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.image.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_photo.__name__}")

    async with state.proxy() as data:
        data["description"] = message.text

    await message.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n"
                         "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üñº")


@logger.catch()
@dp.message_handler(state=StatesForCreate.image, content_types=['photo'])
async def set_photo(message: types.Message, state: FSMContext) -> None:
    """
    Set calories for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_photo.__name__}")

    async with state.proxy() as data:
        photo_url = os.path.abspath(
            os.path.join('images', f"{data['title']}_{message.from_user.id}.png"))
        await message.photo[-1].download(destination_file=photo_url)
        send_data_from_recipe_to_database(message=message, title=data['title'], type_meal=data['type'],
                                          calories=data['calories'],
                                          time=data['time'], description=data['description'], photo=photo_url)
        photo_lsd = open(photo_url, 'rb')
        await bot.send_photo(message.chat.id, photo=photo_lsd, caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}üò±\n"
                                                                       f"<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: {data['type']}\n"
                                                                       f"<b>üçî –ö–∞–ª–ª–æ—Ä–∏–∏</b>: {data['calories']}\n"
                                                                       f"<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {data['time']}\n"
                                                                       f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}")


@logger.catch()
@dp.message_handler(commands=['create_history'])
async def create_history(message: types.Message) -> None:
    """
    Show history if created products
    :params
        message - object of Message class
    :return
        none
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {create_history.__name__}")
    query = get_created_history(message=message)

    if not query:
        await message.answer("–£–≤—ã, –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ <strong>—Å–æ–∑–¥–∞—Ç—å</strong>, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ "
                             "–≤—ã–±–µ—Ä–∏—Ç–µ <strong>–¥—Ä—É–≥—É—é</strong> –∫–æ–º–∞–Ω–¥—É –∏–∑ /help")
    else:
        for indexes in query:
            photo_lsd = open(indexes[5], 'rb')
            await bot.send_photo(message.chat.id,
                                 photo=photo_lsd,
                                 caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {indexes[0]}üò±\n"
                                         f"<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: {indexes[1]}\n"
                                         f"<b>üçî –ö–∞–ª–æ—Ä–∏–∏</b>: {indexes[2]}\n"
                                         f"<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {indexes[3]}\n"
                                         f"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {indexes[4]}")


def main() -> None:
    """
    Function which starts bot, start logs adn create a db
    :return: None
    """
    executor.start_polling(dp)


if __name__ == "__main__":
    logger.add('bot.log', format='{time} {level} {message}', level='DEBUG')
    logger.info('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω...')
    main()
