import os.path
import re
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from config import BOT_TOKEN, DEFAULT_COMMANDS
from keyboards.start_keyboard import start_keyboard
from keyboards.send_more_recipies_keyboard import send_more_recipies_keyboard, send_more_recipies_cd_walk
from keyboards.type_meal_keyboard import type_meal_keyboard
from keyboards.add_to_favorites import add_to_favorites, add_to_favorites_cd_walk
from loguru import logger
from database.database import (create_user, send_data_from_recipe_to_database, get_created_history,
                               get_data_from_table_in_range, add_recipe_to_favorites_table_db)
from states import storage, StatesForCreate

bot = Bot(BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
regex = "^[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+$"
pattern = re.compile(regex)
counter_for_breakfast = 0
counter_for_dinner = 0
counter_for_lunch = 0
counter_for_desserts = 0


@logger.catch()
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    """
    Start function
    :param message: Object of message class
    :return: None
    """
    create_user(message)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {start.__name__}")
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.full_name}! üôã\n–Ø - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤. üî•\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏ "
                         "–ø–æ–Ω—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚ò∫Ô∏è",
                         reply_markup=start_keyboard())


@logger.catch()
@dp.message_handler(commands=["help"])
async def help_info(message: types.Message):
    """
    Function which helps you to choose a command
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É help")
    string = ""
    for name, description in DEFAULT_COMMANDS:
        string += f"‚û°Ô∏è<b>{name}</b> - {description}\n"
    await message.answer(string)


async def send_more_recipies(message: types.Message, table_name: str, quantity_range: int = 0) -> None:
    """
    Function which get data from required table recipies in a specific range
    :params
        message - Object of message class
        quantity_range - range of required pk
        table_name - name of required table
    :return
        None
    """
    try:
        queryset = get_data_from_table_in_range(message=message, number=quantity_range * 15, table_name=table_name)
        for items in queryset:
            message_structure = f"{hlink(items[1], items[5])} üò±\nüÜî id: {items[0]}\n<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: " \
                                f"{items[2]}\n<b>üçî –ö–∞–ª–æ—Ä–∏–∏</b>: {items[3]}\n<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {items[4]}"
            await message.answer(message_structure, reply_markup=add_to_favorites(table_name=table_name, pk=items[0]))
            time.sleep(0.5)
        if len(queryset) == 15:
            await bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –µ—â–µ?", reply_markup=send_more_recipies_keyboard(
                table_name=table_name
            ))
    except Exception:
        await bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(")


@dp.callback_query_handler(add_to_favorites_cd_walk.filter(),
                           lambda call: call['message']['reply_markup']
                                        ['inline_keyboard'][0][0]['text'] == "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ‚ù§Ô∏è")
async def add_recipe_to_favorites(callback_query: types.CallbackQuery, callback_data: dict) -> None:
    """
    Function to add recipe to favorites by its pk
        :params
        callback_query - callback from inline keyboard
        callback_data - special data to insert args in callback function
    :return
        None
    """
    try:
        table_name = callback_data.get("table_name")
        pk = callback_data.get("pk")
        add_recipe_to_favorites_table_db(callback_query.message, table_name, pk)
        await bot.send_message(callback_query.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ ‚úÖ")
    except IndexError:
        await bot.send_message(callback_query.message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ  üîÑ‚ùó")


@logger.catch()
@dp.message_handler(commands=["breakfast"])
async def breakfast(message: types.Message) -> None:
    """
    Function for sending recipies for breakfast
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {breakfast.__name__}")
    await send_more_recipies(message=message, table_name='breakfast')


@logger.catch()
@dp.message_handler(commands=["dinner"])
async def dinner(message: types.Message) -> None:
    """
    Function for sending recipies for dinner
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {dinner.__name__}")
    await send_more_recipies(message=message, table_name='dinner')


@logger.catch()
@dp.message_handler(commands=["lunch"])
async def lunch(message: types.Message) -> None:
    """
    Function for sending recipies for lunch
    :param message: Object of message class
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {lunch.__name__}")
    await send_more_recipies(message=message, table_name='lunch')


@logger.catch()
@dp.message_handler(commands=["desserts"])
async def desserts(message: types.Message) -> None:
    """
    Function for sending recipies for desserts
    :param
        message: Object of message class
    :return:
        None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {desserts.__name__}")
    await send_more_recipies(message=message, table_name='desserts')


@logger.catch()
@dp.message_handler(commands=['favorites'])
async def favorites(message: types.Message) -> None:
    """
    Function which send all favorite recipies
    :param
        message: Object of message class
    :return:
        None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {favorites.__name__}")
    await send_more_recipies(message=message, table_name='favorites')


@dp.callback_query_handler(send_more_recipies_cd_walk.filter())
async def get_answer(callback_query: types.CallbackQuery, callback_data: dict) -> None:
    """
    Callback function to get the answer about sending more recipies from user
    :params
        callback_query - callback from inline keyboard
        callback_data - special data to insert args in callback function
    :return
        None
    """
    global counter_for_breakfast, counter_for_lunch, counter_for_dinner, counter_for_desserts

    if callback_data.get('answer') == '–î–∞':
        table_name = callback_data.get('table_name')

        if table_name == 'breakfast':
            counter_for_breakfast += 1
            counter = counter_for_breakfast
        elif table_name == 'lunch':
            counter_for_lunch += 1
            counter = counter_for_lunch
        elif table_name == 'dinner':
            counter_for_dinner += 1
            counter = counter_for_dinner
        else:
            counter_for_desserts += 1
            counter = counter_for_desserts
        await send_more_recipies(callback_query.message, quantity_range=counter, table_name=table_name)
    else:
        await bot.send_message(callback_query.message.chat.id, "–Ø —Ä–∞–¥, —á—Ç–æ –í—ã –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏ –≤ "
                                                               "–Ω–∞—à–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö üòä")


@logger.catch()
@dp.message_handler(commands=["create"])
async def create_recipe(message: types.Message) -> None:
    """
    Funtion for creating recipies
    :params
        message - object of Message class
    :return
        None
    """
    await StatesForCreate.title.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {create_recipe.__name__}")
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Ü–µ–ø—Ç–∞! üÜï\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ üçΩ:")


@logger.catch()
@dp.message_handler(state=StatesForCreate.title)
async def set_title(message: types.Message, state: FSMContext) -> None:
    """
    Set type for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.callback_type.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_title.__name__}")
    try:
        if pattern.search(message.text) is not None:

            async with state.proxy() as data:
                data["title"] = message.text

            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –∏–¥–µ–º –¥–∞–ª—å—à–µ. –ò–∑ –∫–∞–∫–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞ –¥–Ω—è –±–ª—é–¥–æ?",
                                 reply_markup=type_meal_keyboard())
        else:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã! ‚ùå\n"
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ‚ùó")
            raise ValueError
    except ValueError:
        await state.reset_state()
        await StatesForCreate.title.set()


@logger.catch()
@dp.callback_query_handler(state=StatesForCreate.callback_type)
async def get_type_callback(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    """"""
    await StatesForCreate.time.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É "
                f"{get_type_callback.__name__}")
    try:
        async with state.proxy() as data:
            data["type"] = callback_query.data
            await callback_query.message.answer("‚úÖ –ï—Å—Ç—å, –∏–¥–µ–º –¥–∞–ª—å—à–µ. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è "
                                                "–±–ª—é–¥–∞?\n<b>(–ü—Ä–∏–º–µ—Ä: 3 –¥ 2 —á 1 –º–∏–Ω)</b>")
    except Exception:
        await bot.send_message(callback_query.message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ —Ö–æ–¥–µ –≤—ã–±–æ—Ä–∞.\n"
                                                               "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ üîÑ‚ùó")
        await state.reset_state()
        await StatesForCreate.callback_type.set()


@logger.catch()
@dp.message_handler(state=StatesForCreate.time)
async def set_time(message: types.Message, state: FSMContext) -> None:
    """
    Set time for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.calories.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_time.__name__}")

    try:
        if message.text.replace(" ", "").isalnum():

            async with state.proxy() as data:
                data["time"] = message.text

            await message.answer("‚úÖ –í—Ä–µ–º—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤–µ—Å–∏—Ç –±–ª—é–¥–æ?\n"
                                 "<b>(–ü—Ä–∏–º–µ—Ä: 123 –∫–∫–∞–ª)</b>")
        else:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã! ‚ùå\n"
                                 "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ‚ùó")
            raise ValueError
    except ValueError:
        await state.reset_state()
        await StatesForCreate.time.set()


@logger.catch()
@dp.message_handler(state=StatesForCreate.calories)
async def set_calories(message: types.Message, state: FSMContext) -> None:
    """
    Set calories for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.description.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_calories.__name__}")

    try:
        if message.text.replace(" ", "").isalnum():

            async with state.proxy() as data:
                data["calories"] = message.text

            await message.answer("–≠—Ö, –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–æ—Ä—å–±–∞ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏... üòî\n"
                                 "‚è≠ –û–ø–∏—à–∏—Ç–µ –≤–∫—Ä–∞—Ç—Ü–µ —ç—Ç–∞–ø—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. \n"
                                 "–ü—Ä–∏–º–µ—Ä: (1. –†–∞–∑–±–∏—Ç—å —è–π—Ü–æ. 2. –î–æ–±–∞–≤–∏—Ç—å –º—É–∫—É ...)")
        else:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. ‚ùå\n "
                                 "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>–∑–∞–Ω–æ–≤–æ</b>)! üîÑ‚ùó")
            raise ValueError
    except ValueError:
        await state.reset_state()
        await StatesForCreate.calories.set()


@logger.catch()
@dp.message_handler(state=StatesForCreate.description)
async def set_description(message: types.Message, state: FSMContext) -> None:
    """
    Set description for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    await StatesForCreate.image.set()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_photo.__name__}")

    async with state.proxy() as data:
        try:
            data["description"] = message.text
            await message.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ, –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n"
                                 "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üñº")
        except Exception:
            await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ —Ö–æ–¥–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.\n–£–±–µ–¥–∏—Ç–µ—Å—å, "
                                                    "—á—Ç–æ –í–∞—à —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–º–µ—Ä—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ‚ùó")
            await state.reset_state()
            await StatesForCreate.description.set()


@logger.catch()
@dp.message_handler(state=StatesForCreate.image, content_types=['photo'])
async def set_photo(message: types.Message, state: FSMContext) -> None:
    """
    Set calories for created recipe
    :params
        message - object of Message class
        state - object of FSM
    :return
        none
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {set_photo.__name__}")

    async with state.proxy() as data:
        try:
            photo_url = os.path.abspath(
                os.path.join('images', f"{data['title']}_{message.from_user.id}.png"))
            await message.photo[-1].download(destination_file=photo_url)
            send_data_from_recipe_to_database(message=message, title=data['title'], type_meal=data['type'],
                                              calories=data['calories'],
                                              time=data['time'], description=data['description'], photo=photo_url)
            photo_lsd = open(photo_url, 'rb')
            await bot.send_photo(message.chat.id, photo=photo_lsd, caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}üò±\n"
                                                                           f"<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: {data['type']}\n"
                                                                           f"<b>üçî –ö–∞–ª–æ—Ä–∏–∏</b>: {data['calories']}\n"
                                                                           f"<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: "
                                                                           f"{data['time']}\n"
                                                                           f"<b>üìñ –û–ø–∏—Å–∞–Ω–∏–µ</b>: {data['description']}")
        except Exception:
            await bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ —Ö–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. \n"
                                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–ª–µ–∑–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ"
                                                    "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ‚ùóÔ∏è")
            await state.reset_state()
            await StatesForCreate.image.set()

        await state.reset_state()


@logger.catch()
@dp.message_handler(commands=['create_history'])
async def create_history(message: types.Message) -> None:
    """
    Show history if created products
    :params
        message - object of Message class
    :return
        none
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –ø–µ—Ä–µ—à–µ–ª –≤ –∫–æ–º–∞–Ω–¥—É {create_history.__name__}")
    query = get_created_history(message=message)

    if not query:
        await message.answer("–£–≤—ã, –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞.\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ <strong>—Å–æ–∑–¥–∞—Ç—å</strong>, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /create –∏–ª–∏ "
                             "–≤—ã–±–µ—Ä–∏—Ç–µ <strong>–¥—Ä—É–≥—É—é</strong> –∫–æ–º–∞–Ω–¥—É –∏–∑ /help")
    else:
        for indexes in query:
            photo_lsd = open(indexes[5], 'rb')
            await bot.send_photo(message.chat.id,
                                 photo=photo_lsd,
                                 caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {indexes[0]}üò±\n"
                                         f"<b>üçΩ –ë–ª—é–¥–æ –Ω–∞</b>: {indexes[1]}\n"
                                         f"<b>üçî –ö–∞–ª–æ—Ä–∏–∏</b>: {indexes[2]}\n"
                                         f"<b>‚è≥ –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b>: {indexes[3]}\n"
                                         f"<b>üìñ –û–ø–∏—Å–∞–Ω–∏–µ</b>: {indexes[4]}")


def main() -> None:
    """
    Function which starts bot, start logs adn create a db
    :return: None
    """
    executor.start_polling(dp)


if __name__ == "__main__":
    logger.add('bot.log', format='{time} {level} {message}', level='DEBUG')
    logger.info('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω...')
    main()
